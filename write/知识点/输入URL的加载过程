
在浏览器的地址栏中输入一个网址并按下回车后的过程

一、输入网址并按下回车
当你在浏览器的地址栏中输入一个网址并按下回车时，浏览器会开始处理你的输入。这个网址通常是一个完整的 URL（如 https://www.example.com），包括协议、域名、路径、查询参数等。

二、URL 解析
1、浏览器会对输入的 URL 进行解析：
2、协议解析: 如 http 或 https，协议决定了浏览器如何与服务器进行通信。

三、DNS 解析
1、查找缓存: 浏览器首先会检查自己的缓存是否有对应域名的 IP 地址。如果没有，接着会检查操作系统的缓存。
2、DNS 查询: 如果缓存中找不到对应的 IP 地址，浏览器会向 DNS 服务器发出查询请求。DNS 服务器会将域名解析为对应的 IP地址。
DNS 解析过程: 如果本地 DNS 服务器没有对应的记录，它会递归查询其他 DNS 服务器，直到找到正确的 IP 地址。然后将这个 IP 地址返回给浏览器。

四、TCP 连接建立
三次握手: 在得到 IP 地址后，浏览器会通过网络与服务器建立一个 TCP 连接。TCP 连接的建立过程包括三次握手：
客户端发送一个 SYN（同步）包到服务器。
服务器收到后，回应一个 SYN-ACK（同步-确认）包。
客户端收到 SYN-ACK 包后，再回应一个 ACK（确认）包。此时，TCP 连接建立成功。

五、发送 HTTP/HTTPS 请求
HTTP/HTTPS 请求: 一旦 TCP 连接建立，浏览器会根据使用的协议（HTTP 或 HTTPS）发送一个请求到服务器：

请求行: 包括请求方法（GET、POST 等）、请求的资源路径（如 /index.html）和 HTTP 版本号。
请求头: 包含关于请求的元数据，如 User-Agent、Accept-Language 等。
请求体: 如果是 POST 请求，还会包含请求的主体数据。
HTTPS 加密通信: 如果使用 HTTPS，浏览器会先与服务器进行 SSL/TLS 握手，建立安全加密通道。此过程包括证书验证、密钥交换等，以确保通信的机密性和完整性。

六、服务器处理请求并返回响应
服务器处理请求: 服务器在接收到请求后，会根据请求的路径和参数处理请求。这可能涉及查询数据库、调用其他服务、读取文件等。
生成响应: 服务器会生成一个 HTTP 响应，其中包括：
状态行: 如 HTTP/1.1 200 OK，表示请求是否成功。
响应头: 包含响应的元数据，如 Content-Type（内容类型）、Content-Length（内容长度）等。
响应体: 这是实际的内容，如 HTML 页面、JSON 数据、图像等。

七、浏览器接收响应并开始渲染页面
1、解析 HTML: 浏览器接收到响应后，开始解析 HTML 文档的内容。它会逐行读取 HTML，并根据标记构建 DOM（Document Object Model）树。
2、加载资源: 在解析 HTML 的过程中，如果遇到外部资源（如 CSS 文件、JavaScript 文件、图像等），浏览器会发起额外的 HTTP 请求来获取这些资源。这些请求可以是并行的，以加快页面加载速度。
3、CSSOM 构建: 浏览器会解析 CSS 文件并构建 CSSOM（CSS Object Model）树。这棵树描述了页面的样式。
4、Render Tree 构建: 浏览器将 DOM 树和 CSSOM 树结合，构建渲染树（Render Tree）。渲染树包含了页面中每个可见元素的视觉表示，包括它们的样式和位置。

八、页面布局与绘制
1、布局（Layout）: 根据渲染树，浏览器会计算每个元素在页面上的确切位置和大小。这一步也被称为“回流”（Reflow）。
2、绘制（Painting）: 布局完成后，浏览器会将各个元素绘制到屏幕上。这一步称为“重绘”（Repaint）。

九、执行 JavaScript
1、解析与执行: 如果 HTML 中包含 <script> 标签或外部 JavaScript 文件，浏览器会暂停页面的解析，下载并执行这些脚本。JavaScript 可以操作 DOM、发起新的网络请求、甚至影响页面的布局和样式。
2、异步与延迟执行: 通过 async 或 defer 属性，JavaScript 脚本的加载和执行可以异步或延迟进行，避免阻塞页面的渲染。

十、DOMContentLoaded 事件触发
DOMContentLoaded: 当初始的 HTML 被完全加载和解析，且不包括样式表、图片等资源时，浏览器会触发 DOMContentLoaded 事件。此时页面已经可以被交互，但外部资源可能还在加载中。

十一、完全加载并显示页面
Load 事件触发: 当页面中的所有资源，包括图片、样式表、JavaScript 文件等都加载完成后，浏览器会触发 load 事件。这标志着页面的加载过程全部结束。

十二、后续操作与交互
1、用户交互: 页面加载完成后，用户可以开始与页面进行交互。浏览器通过监听用户的操作（如点击、输入、滚动等），动态地更新页面内容。
2、异步请求: 如果页面包含 AJAX 请求或使用了 fetch API，浏览器会在后台继续与服务器通信，以加载更多的数据或更新页面内容。